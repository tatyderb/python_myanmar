s = input()
n = int(input())
words = input().split()
nums = maps(int, input().split())
nums = [int(x) for x in input().split()]

x = 10
s = 'Hello'
# 10 Hello
print(x, s)
# x=10 and Hello
print(f'{x=} and {s}'
# 05:12
h, m = 5, 12
print(f'{h:02d}:{m:02d}')

7 / 2  3.5
7 // 2 3
7 % 2  1
7 ** 2 49

# объявили функцию
def foo(x, y, a=True, z=0):
    print(x, y, z, a)
# вызываем функцию
foo(5, 3, z=7)
# 5 3 7 True

if x <= 3:
    res = 1
elif x == 100:
    res = 2
else:
    res = 3

== != <= >= < >
3 <= x < 7
3 <= x and x < 7
x < 3 or 7 <= x
not(3 <= x < 7)
z = 2 if x>0 else 10 

# 1 2 4 5 
x = 0
while True:
    if x > 5:
        break
    x += 1
    if x == 3:
        continue
    print(x, end=' ')
  
for i in range(5):
    print(i)
    
# 0 1 2 3 4
range(5)        
# 2 3 4
range(2, 5)        
# 1 3 5 7
range(1, 9, 2)

# 1 2 3 4 5 6 7 8 9 10
map(lambda x: x+1, range(10))
# 6 7 8 9
filter(lambda x: x > 5, range(10))
# 45 = 0 + 1 + ... + 9 functools
reduce(lambda out, x: out + x, range(10), 0)

all([1, 7, 0, 5])   # False  
any([1, 7, 0, 5])   # True 
all([]) == True  
any([]) == False

a, *b, c = line.split()

string.digits
string.ascii_letters

=================================== defaultdict =========================
# страна - список городов.

from collections import defaultdict

s = [('Россия', 'Москва'), ('Китай', 'Пекин'), ('Россия', 'Самара'), ('Россия', 'Тула'), ('Польша', 'Краков')]
d = defaultdict(list)
for k, v in s:
    d[k].append(v)
print(d.items())
# dict_items([('Россия', ['Москва', 'Самара', 'Тула']), ('Китай', ['Пекин']), ('Польша', ['Краков'])])

работает быстрее, чем
d = {}
for k, v in s:
    d.setdefault(k, []).append(v)

=============================================  zip / unzip =========================
employee_numbers = [2, 9, 18, 28]
employee_names = ["Дима", "Марина", "Андрей", "Никита"]

zipped_values = zip(employee_names, employee_numbers)
# [('Дима', 2), ('Марина', 9), ('Андрей', 18), ('Никита', 28)]

employees_zipped = [('Дима', 2), ('Марина', 9), ('Андрей', 18), ('Никита', 28)]
employee_names, employee_numbers = zip(*employees_zipped)

print(employee_names)       # ("Дима", "Марина", "Андрей", "Никита")
print(employee_numbers)     # (2, 9, 18, 28)


 {key: value for key, *value in zip(*rows)}  # [(k1, k2, ..), (v11, v12, ...), ... (vn1, vn2, ...)] => {k1:[v11, v21,..vn1], k2: [v12, v22,.. vn2]..}
======================================================

open("test.txt", mode="r", encoding="utf-8")

#------------------------ datetime
# работа с локалью

from datetime import date  (неизменяемое)
date(year, month, day)
date2 = date1.replace(year=1995)
date.today()
date.weekday()    # 0 - понедельник, 6 - воскресенье
date.isoweekday() # 1 - понедельник, 7 - воскресенье
date.fromordinal(n), toordinal() - количество дней с 0001-01-01
d.strftime() 
d.isoformat() или str(d) 2021-12-31
date.fromisoformat()    # 3.7+

from datetime import time  (неизменяемое)
time(hour, minute, second, microsecond)
t.replace(hour=10)
time.now()
t.isoformat() или str(t) 21:15:17
time.fromisoformat()    # 3.7+


from datetime import datetime  (неизменяемое)
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

my_datetime = datetime(2021, 8, 10, 12, 34, 15)

print(my_datetime.strftime('%A %d, %B %Y, %H:%M:%S'))
# вторник 10, Август 2021, 12:34:15    


from datetime import timedelta
delta = timedelta(days=50, seconds=27, microseconds=10, milliseconds=29000, minutes=5, hours=8, weeks=2)
# есть только атрибуты days, seconds, microseconds
delta.total_seconds()  # выразим все в секундах
dt1+dt2, dt1-dt2, dt1*n, dt1/n, dt1/dt2

# timestamp всегда в UTC (таймзона в +0)
time.time()

=== CSV ==================================
import csv

with open('products.csv', encoding='utf-8') as file:
    rows = csv.reader(file, delimiter=';', quotechar='"')

# в виде списка словарей, ключи - содержимое столбцов первой строки (header)
with open('products.csv', encoding='utf-8') as file:
    rows = csv.DictReader(file, delimiter=';', quotechar='"')

with open('students.csv', 'w', encoding='utf-8', newline='') as file:
    writer = csv.writer(file, delimiter=';', quoting=csv.QUOTE_NONNUMERIC)
    writer.writerow(columns)                 # запись заголовков
    for row in data:                         # запись строк
        writer.writerow(row)

QUOTE_ALL: указывает объектам записи указывать все поля
QUOTE_MINIMAL: указывает объектам записи заключать в кавычки только те поля, которые содержат специальные символы, такие как разделитель delimiter, кавычка quotechar или любой из символов в lineterminator
QUOTE_NONNUMERIC: указывает объектам записи указывать все нечисловые поля
QUOTE_NONE: указывает объектам записи никогда не заключать в кавычки поля

import csv

data = [{'first_name': 'Тимур', 'second_name': 'Гуев', 'class_number': 11, 'class_letter': 'А'},
        {'first_name': 'Руслан', 'second_name': 'Чаниев', 'class_number': 9, 'class_letter': 'Б'},
        {'first_name': 'Роман', 'second_name': 'Белых', 'class_number': 10, 'class_letter': 'В'}]

columns = ['first_name', 'second_name', 'class_number', 'class_letter']

with open('students.csv', 'w', encoding='utf-8', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=columns, delimiter=';', quoting=csv.QUOTE_NONNUMERIC)
    writer.writeheader()                 # запись заголовков
    for row in data:                     # запись строк
        writer.writerow(row)
        
    или все сразу строки:
    writer.writerows(res_rows)